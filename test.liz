; Liz
; This is a comment.

; (def *ident* *args* *return type* *body*)
(def increment [number ~ Int] > Int
 (return (+ number 1))) ; explicit returns (for now)

(def decrement [number ~ Int] > Int
 (return (- number 1)))

(def flip [b ~ Bool] > Bool 
 (return (not b)))

(def say_hi [name ~ String] > Unit
 (const with_hello String (++ "hello " name))
 (print with_hello)
 (return ())) ; you can have an explicit return for variables.

(def concat [s1 ~ String, s2 ~ String] > String
 (return (++ s1 s2)))

(def do_nothing [] > Unit
 (return ()))

(def main [] > Unit
  ; (var *ident* *optional type* *value*)
  (var four 4) ; inferred Int
  (var hello String "World")

  (var no_value Bool undefined) ; this is treated like 'nil' in other languages.
  (var forty Int undefined)

  ; (set *declared variable* *new value*)
  ; It must have the same type of the previous value.
  (set no_value False)
  (set forty (* four 10))

  ; (const *ident* *optional type* value)
  (const pi 3.141592) ; inferred type
  (const tau Float 6.283185) ; explicit typing

  (print (== 4 (decrement (increment 4)))) ; would print "True"
  ; (print with_hello)
  (return ()))
