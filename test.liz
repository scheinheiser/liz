; Liz
; This is a comment.

; (def *ident* *args* *return type* *body*)
(def decrement [number ~ Int] > Int
 (- number 1)) ; the last expression in the block is returned.

(def increment [number ~ Int] > Int
 (return (+ number 1))) ; you can have an explicit return for variables.

(def flip [b ~ Bool] > Bool 
 (return (not b)))

(def say_hi [name ~ String] > Unit
 (const with_hello String (++ "hello " name))
 (print with_hello)
 (return ())) ; you can have an explicit return for variables.

(def concat [s1 ~ String, s2 ~ String] > String
 (return (++ s1 s2)))

(def do_nothing [] > Unit
 (return ()))

; (macro *ident* *expr/value*)
; the code within the macro is substituted at the call site(s) before semantic analysis/type checking.
(macro hello-world "hello world!")
(macro addition (+ 34 35))
(macro f False)

(def main [] > Unit
  ; (var *ident* *optional type* *value*)
  (var four 4) ; inferred Int
  (var hello String "World")

  ; (const *ident* *optional type* value)
  (const pi 3.141592) ; inferred type
  (const tau Float 6.283185) ; explicit typing

  ; %*macro ident*
  ; expands the macro at the call site
  (print %hello-world)
  ; expands to:
  ; (print "hello world!")

  (print %addition)
  ; expands to:
  ; (print (+ 34 35))

  ; (if *cond*
  ;    *true expr*
  ;    *optional false expr*)
  (if True
    (print "got true"))

  (if %f
    (print "this won't be run")
    (print "this will be run"))

  (var loop_cond Int 0)
  (loop until (< 10 loop_cond)
    (print loop_cond))

  (loop myloop until True
    (print "printing in a named loop!")
    (break 'myloop))

  (print (== 4 (decrement (increment 4)))) ; would print "True"
  (return ()))
